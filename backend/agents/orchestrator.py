"""
Orchestrateur Principal - L√©na
Le cerveau du syst√®me qui identifie et d√©l√®gue aux agents appropri√©s
"""

import logging
from pathlib import Path
from typing import Dict, Any, Optional
from enum import Enum
import asyncio
import mimetypes

from agents.directive_agent import directive_agent

logger = logging.getLogger(__name__)

class FileType(Enum):
    """Types de fichiers support√©s"""
    DIRECTIVE = "directive"
    PLAN = "plan"
    PHOTO = "photo"
    EMAIL = "email"
    DEVIS = "devis"
    UNKNOWN = "unknown"

class Orchestrator:
    """
    Orchestrateur principal du syst√®me PGI-IA
    
    R√¥le: Analyser les entr√©es et d√©l√©guer aux agents sp√©cialis√©s
    """
    
    def __init__(self):
        self.agents = {
            FileType.DIRECTIVE: directive_agent,
            # FileType.PLAN: plan_agent,  # √Ä impl√©menter
            # FileType.PHOTO: photo_agent,  # √Ä impl√©menter
            # FileType.EMAIL: email_agent,  # √Ä impl√©menter
            # FileType.DEVIS: estimation_agent,  # √Ä impl√©menter
        }
        
        self.file_patterns = {
            FileType.DIRECTIVE: [
                r'CO-ME-\d+',
                r'CD\s+A\d+',
                r'PCE-\d+',
                r'directive',
                r'changement'
            ],
            FileType.PLAN: [
                r'E-\d{3}',
                r'plan',
                r'drawing',
                r'\.dwg$',
                r'rev[a-z]'
            ],
            FileType.PHOTO: [
                r'\.jpg$',
                r'\.jpeg$',
                r'\.png$',
                r'IMG_\d+'
            ],
            FileType.EMAIL: [
                r'\.eml$',
                r'\.msg$',
                r'RFI',
                r'RE:'
            ],
            FileType.DEVIS: [
                r'devis',
                r'soumission',
                r'quote',
                r'estimation'
            ]
        }
        
        logger.info("üß† Orchestrateur L√©na initialis√©")
    
    async def process_file(self, file_path: Path, project_id: str) -> Dict[str, Any]:
        """
        Traite un fichier upload√© en le d√©l√©guant au bon agent
        
        Args:
            file_path: Chemin vers le fichier
            project_id: ID du projet concern√©
            
        Returns:
            R√©sultat du traitement
        """
        logger.info(f"üéØ Nouveau fichier re√ßu: {file_path.name}")
        
        try:
            # 1. Identifier le type de fichier
            file_type = self._identify_file_type(file_path)
            logger.info(f"üìÅ Type identifi√©: {file_type.value}")
            
            # 2. V√©rifier si on a un agent pour ce type
            if file_type not in self.agents:
                logger.warning(f"‚ö†Ô∏è Pas d'agent disponible pour le type: {file_type.value}")
                return {
                    "status": "pending",
                    "message": f"Type {file_type.value} identifi√© mais agent en d√©veloppement",
                    "file_type": file_type.value
                }
            
            # 3. D√©l√©guer √† l'agent appropri√©
            agent = self.agents[file_type]
            result = await agent.process_directive(file_path)
            
            # 4. Mettre √† jour la base de donn√©es
            if file_type == FileType.DIRECTIVE:
                await agent.update_tracking_table(project_id, result)
            
            # 5. Cr√©er √©v√©nement pour la timeline
            timeline_event = self._create_timeline_event(file_type, result)
            
            return {
                "status": "success",
                "file_type": file_type.value,
                "data": result,
                "timeline_event": timeline_event
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur orchestrateur: {str(e)}")
            return {
                "status": "error",
                "message": str(e)
            }
    
    def _identify_file_type(self, file_path: Path) -> FileType:
        """
        Identifie le type de fichier bas√© sur:
        - Le nom du fichier
        - L'extension
        - Le contenu (si n√©cessaire)
        """
        filename = file_path.name.lower()
        
        # V√©rifier chaque type via patterns
        for file_type, patterns in self.file_patterns.items():
            for pattern in patterns:
                import re
                if re.search(pattern, filename, re.IGNORECASE):
                    return file_type
        
        # V√©rification par mimetype
        mime_type, _ = mimetypes.guess_type(str(file_path))
        if mime_type:
            if mime_type.startswith('image'):
                return FileType.PHOTO
            elif mime_type == 'message/rfc822':
                return FileType.EMAIL
        
        # Si on ne peut pas identifier, retourner UNKNOWN
        return FileType.UNKNOWN
    
    def _create_timeline_event(self, file_type: FileType, data: Dict) -> Dict:
        """Cr√©e un √©v√©nement pour la timeline du projet"""
        
        icons = {
            FileType.DIRECTIVE: "file-signature",
            FileType.PLAN: "drafting-compass",
            FileType.PHOTO: "camera",
            FileType.EMAIL: "envelope",
            FileType.DEVIS: "calculator"
        }
        
        titles = {
            FileType.DIRECTIVE: f"Directive {data.get('numero', 'N/A')} trait√©e",
            FileType.PLAN: "Plan analys√© et converti en 3D",
            FileType.PHOTO: "Photo de chantier g√©olocalis√©e",
            FileType.EMAIL: "Communication analys√©e",
            FileType.DEVIS: "Devis analys√©"
        }
        
        return {
            "type": file_type.value,
            "icon": icons.get(file_type, "file"),
            "title": titles.get(file_type, "Fichier trait√©"),
            "description": data.get('description', 'Traitement termin√©'),
            "data": data,
            "timestamp": data.get('extracted_at')
        }
    
    async def analyze_project_status(self, project_id: str) -> Dict:
        """
        Analyse globale du statut d'un projet
        Utilise tous les agents pour compiler un rapport
        """
        logger.info(f"üìä Analyse globale du projet {project_id}")
        
        # TODO: Impl√©menter l'analyse crois√©e
        # - V√©rifier coh√©rence directives vs plans
        # - D√©tecter conflits potentiels
        # - Calculer m√©triques de progression
        
        return {
            "project_id": project_id,
            "status": "analysis_pending",
            "message": "Fonctionnalit√© en d√©veloppement"
        }


# Instance singleton
orchestrator = Orchestrator()