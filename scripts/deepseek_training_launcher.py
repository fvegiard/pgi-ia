#!/usr/bin/env python3
"""
Lancement de l'entra√Ænement DeepSeek avec le dataset enrichi
"""

import json
import os
from openai import OpenAI
from dotenv import load_dotenv
import time

# Configuration
load_dotenv('/root/dev/pgi-ia/.env')
DATASET_PATH = "/mnt/c/Users/fvegi/deepseek_training_final_quebec_fixed.jsonl"

client = OpenAI(
    api_key=os.getenv('DEEPSEEK_API_KEY'),
    base_url="https://api.deepseek.com/v1"
)

def validate_dataset():
    """Valider le dataset avant entra√Ænement"""
    print("üîç VALIDATION DATASET DEEPSEEK")
    print("=" * 60)
    
    examples = []
    with open(DATASET_PATH, 'r', encoding='utf-8') as f:
        for line in f:
            examples.append(json.loads(line))
    
    print(f"‚úÖ Exemples charg√©s: {len(examples)}")
    
    # Statistiques
    stats = {
        'total': len(examples),
        'system_prompts': set(),
        'avg_messages': 0,
        'categories': {}
    }
    
    total_messages = 0
    for ex in examples:
        total_messages += len(ex['messages'])
        system_content = ex['messages'][0]['content']
        stats['system_prompts'].add(system_content)
        
        # Cat√©goriser
        if 's√©curit√©' in system_content:
            stats['categories']['s√©curit√©'] = stats['categories'].get('s√©curit√©', 0) + 1
        elif 'First Nations' in system_content or 'autochtone' in system_content:
            stats['categories']['autochtone'] = stats['categories'].get('autochtone', 0) + 1
        elif 'CCQ' in system_content or 'qu√©b√©cois' in system_content:
            stats['categories']['qu√©bec'] = stats['categories'].get('qu√©bec', 0) + 1
        else:
            stats['categories']['g√©n√©ral'] = stats['categories'].get('g√©n√©ral', 0) + 1
    
    stats['avg_messages'] = total_messages / len(examples)
    stats['unique_prompts'] = len(stats['system_prompts'])
    
    print(f"\nüìä STATISTIQUES:")
    print(f"  ‚Ä¢ Prompts syst√®me uniques: {stats['unique_prompts']}")
    print(f"  ‚Ä¢ Messages moyens par exemple: {stats['avg_messages']:.1f}")
    print(f"\nüìÇ CAT√âGORIES:")
    for cat, count in stats['categories'].items():
        print(f"  ‚Ä¢ {cat}: {count} ({count/stats['total']*100:.1f}%)")
    
    return examples, stats

def test_with_examples(examples):
    """Tester DeepSeek avec quelques exemples"""
    print("\n\nüß™ TEST AVEC EXEMPLES R√âELS")
    print("=" * 60)
    
    # Prendre 3 exemples vari√©s
    test_cases = [
        examples[0],  # Premier exemple
        examples[len(examples)//2],  # Milieu
        examples[-1]  # Dernier
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìù Test {i}/3:")
        user_msg = case['messages'][1]['content']
        expected = case['messages'][2]['content']
        
        print(f"Question: {user_msg[:100]}...")
        
        try:
            response = client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": case['messages'][0]['content']},
                    {"role": "user", "content": user_msg}
                ],
                temperature=0.5,
                max_tokens=500
            )
            
            answer = response.choices[0].message.content
            print(f"‚úÖ R√©ponse DeepSeek re√ßue ({len(answer)} caract√®res)")
            
            # Comparer avec attendu
            if len(expected) > 100:
                print(f"Attendu: {expected[:100]}...")
            
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            
        time.sleep(1)  # Rate limiting

def create_training_config():
    """Cr√©er configuration pour fine-tuning"""
    config = {
        "model": "deepseek-chat",
        "dataset": "pgi_ia_quebec_electrical",
        "training_file": DATASET_PATH,
        "validation_split": 0.1,
        "hyperparameters": {
            "epochs": 3,
            "batch_size": 4,
            "learning_rate": 2e-5,
            "warmup_steps": 100
        },
        "metadata": {
            "project": "PGI-IA",
            "domain": "Construction √©lectrique Qu√©bec",
            "language": "fran√ßais",
            "safety": "Disclaimers CNESST inclus",
            "version": "1.0"
        }
    }
    
    config_path = "/mnt/c/Users/fvegi/deepseek_training_config.json"
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Configuration sauvegard√©e: {config_path}")
    return config

def generate_deployment_script():
    """Cr√©er script de d√©ploiement pour production"""
    script = """#!/usr/bin/env python3
'''
D√©ploiement PGI-IA avec mod√®le DeepSeek entra√Æn√©
'''

import os
from openai import OpenAI

# Configuration production
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
MODEL_ID = "pgi-ia-quebec-electrical-v1"  # √Ä remplacer par ID r√©el apr√®s training

client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com/v1"
)

def query_pgi_ia(question, project_context=None):
    '''Interroger PGI-IA'''
    
    system_prompt = '''Tu es PGI-IA, l'assistant intelligent de gestion de projets √©lectriques 
    pour DR √âlectrique Inc. Tu connais les normes qu√©b√©coises, les proc√©dures CCQ, et tu g√®res 
    les projets de construction √©lectrique. Pour toute question de s√©curit√©, tu rediriges vers 
    les ressources officielles CNESST.'''
    
    if project_context:
        system_prompt += f"\\n\\nContexte projet actuel: {project_context}"
    
    try:
        response = client.chat.completions.create(
            model=MODEL_ID,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ],
            temperature=0.3,
            max_tokens=1000
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        return f"Erreur PGI-IA: {str(e)}"

# Exemples d'utilisation
if __name__ == "__main__":
    print("ü§ñ PGI-IA PR√äT!")
    
    # Test 1: Gestion directive
    print("\\nüìã Test Directive:")
    response = query_pgi_ia(
        "J'ai re√ßu la directive PCE-47 pour Kahnawake, comment proc√©der?",
        "C24-060 - Centre Culturel Kahnawake"
    )
    print(response)
    
    # Test 2: Question CCQ
    print("\\nüë∑ Test CCQ:")
    response = query_pgi_ia("Quel est le ratio compagnon/apprenti pour un chantier commercial?")
    print(response)
    
    # Test 3: S√©curit√© (doit rediriger)
    print("\\n‚ö†Ô∏è Test S√©curit√©:")
    response = query_pgi_ia("Comment faire le cadenassage d'un panneau 600V?")
    print(response)
"""
    
    script_path = "/mnt/c/Users/fvegi/deploy_pgi_ia_production.py"
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script)
    
    print(f"\nüöÄ Script de d√©ploiement cr√©√©: {script_path}")

def main():
    """Pipeline principal"""
    print("üöÄ LANCEMENT ENTRA√éNEMENT DEEPSEEK - PGI-IA")
    print("=" * 60)
    
    # 1. Valider dataset
    examples, stats = validate_dataset()
    
    # 2. Tester avec exemples
    test_with_examples(examples)
    
    # 3. Cr√©er configuration
    config = create_training_config()
    
    # 4. G√©n√©rer script d√©ploiement
    generate_deployment_script()
    
    # 5. Instructions finales
    print("\n\nüìå PROCHAINES √âTAPES:")
    print("=" * 60)
    print("1. ENTRA√éNEMENT (si API le permet):")
    print("   deepseek train --config deepseek_training_config.json")
    print("\n2. VALIDATION:")
    print("   python deploy_pgi_ia_production.py")
    print("\n3. INT√âGRATION:")
    print("   - Remplacer MODEL_ID dans le script de d√©ploiement")
    print("   - Int√©grer dans l'API Flask existante")
    print("   - Tester avec vrais utilisateurs DR √âlectrique")
    print("\n4. MONITORING:")
    print("   - Logger toutes les requ√™tes")
    print("   - Mesurer satisfaction utilisateurs")
    print("   - Identifier cas non couverts")
    
    print(f"\n‚úÖ Dataset pr√™t: {stats['total']} exemples")
    print(f"üéØ Focus: Construction √©lectrique Qu√©bec (sans s√©curit√© CNESST)")

if __name__ == "__main__":
    main()