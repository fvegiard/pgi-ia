#!/usr/bin/env python3
"""
Import rapide des projets prioritaires (Kahnawake et Alexis Nihon)
Version all√©g√©e pour test
"""

import os
import sqlite3
import json
import re
from datetime import datetime
from pathlib import Path

# Configuration
DATASET_BASE = "/mnt/c/Users/fvegi/OneDrive/Desktop/dataset"
DB_PATH = "/root/dev/pgi-ia/database.db"
OUTPUT_JSONL = "/mnt/c/Users/fvegi/deepseek_training_priority_projects.jsonl"

# Projets prioritaires
PRIORITY_PROJECTS = ['C24-060', 'C24-048']

class FastImporter:
    def __init__(self):
        self.training_data = []
        self.stats = {'projects': 0, 'documents': 0, 'examples': 0}
        
    def setup_db(self):
        """Initialiser DB"""
        self.conn = sqlite3.connect(DB_PATH)
        self.cursor = self.conn.cursor()
        
        # Cr√©er tables
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS projects (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                description TEXT,
                status TEXT DEFAULT 'active'
            )
        ''')
        
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS documents (
                id TEXT PRIMARY KEY,
                project_id TEXT,
                filename TEXT NOT NULL,
                content TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        self.conn.commit()
        
    def import_priority_projects(self):
        """Import rapide des projets prioritaires"""
        print("üöÄ IMPORT RAPIDE - PROJETS PRIORITAIRES")
        print("=" * 50)
        
        self.setup_db()
        
        active_path = os.path.join(DATASET_BASE, "Contrats de Projets - En cours")
        
        # Parcourir dossiers
        for folder in os.listdir(active_path):
            # V√©rifier si c'est un projet prioritaire
            is_priority = any(code in folder for code in PRIORITY_PROJECTS)
            
            if not is_priority:
                continue
                
            print(f"\n‚≠ê Projet prioritaire trouv√©: {folder}")
            
            # Parser infos projet
            project_code = None
            project_name = folder
            
            # Extraire code projet
            match = re.match(r'(C\d{2}-\d{3})', folder)
            if match:
                project_code = match.group(1)
                project_name = folder.replace(project_code + ' - ', '')
                
            if not project_code:
                continue
                
            # Ins√©rer projet
            self.cursor.execute('''
                INSERT OR REPLACE INTO projects (id, name, description, status)
                VALUES (?, ?, ?, ?)
            ''', (
                project_code,
                project_name,
                f"Import: {datetime.now().strftime('%Y-%m-%d')} - {folder}",
                'active'
            ))
            
            # Scanner documents (limit√©)
            project_path = os.path.join(active_path, folder)
            doc_count = 0
            
            for root, dirs, files in os.walk(project_path):
                # Limiter profondeur
                depth = root.replace(project_path, '').count(os.sep)
                if depth > 3:
                    continue
                    
                for file in files[:10]:  # Max 10 fichiers par dossier
                    if file.endswith(('.pdf', '.xlsx', '.dwg')):
                        doc_id = f"{project_code}-{doc_count:04d}"
                        rel_path = os.path.relpath(root, project_path)
                        
                        self.cursor.execute('''
                            INSERT OR REPLACE INTO documents
                            (id, project_id, filename, content)
                            VALUES (?, ?, ?, ?)
                        ''', (
                            doc_id,
                            project_code,
                            file,
                            f"Type: {file.split('.')[-1]} | Chemin: {rel_path}"
                        ))
                        
                        doc_count += 1
                        
                        if doc_count >= 50:  # Max 50 docs par projet
                            break
                            
                if doc_count >= 50:
                    break
                    
            print(f"  üìÑ Documents import√©s: {doc_count}")
            self.stats['documents'] += doc_count
            self.stats['projects'] += 1
            
            # G√©n√©rer exemples de formation
            self.generate_training_examples(project_code, project_name, doc_count)
            
        # Ajouter exemples g√©n√©riques
        self.add_generic_examples()
        
        # Sauvegarder
        self.conn.commit()
        self.save_training_data()
        
        print(f"\n‚úÖ Import termin√©!")
        print(f"üìä Stats: {self.stats}")
        
    def generate_training_examples(self, code, name, doc_count):
        """G√©n√©rer exemples pour un projet"""
        examples = [
            {
                "messages": [
                    {"role": "system", "content": "Tu es PGI-IA, assistant de gestion de projets √©lectriques au Qu√©bec."},
                    {"role": "user", "content": f"Quel est le statut du projet {code}?"},
                    {"role": "assistant", "content": f"**Projet {code} - {name}**\n\nüìä Statut: Actif\nüìÅ Documents: {doc_count} fichiers index√©s\n\nüîç Sections disponibles:\n‚Ä¢ Plans et devis construction\n‚Ä¢ Directives de changement\n‚Ä¢ Administration et comptabilit√©\n‚Ä¢ Photos de chantier\n‚Ä¢ Permis et autorisations\n\nUtilisez la recherche pour acc√©der aux documents sp√©cifiques."}
                ]
            }
        ]
        
        if 'Kahnawake' in name:
            examples.append({
                "messages": [
                    {"role": "system", "content": "Tu es PGI-IA, expert en projets autochtones."},
                    {"role": "user", "content": "Particularit√©s pour Kahnawake?"},
                    {"role": "assistant", "content": "**Projet Kahnawake - Particularit√©s**:\n\nüèõÔ∏è **Territoire Mohawk**:\n‚Ä¢ Exemption TPS/TVQ sur travaux\n‚Ä¢ Fair Wage Policy obligatoire\n‚Ä¢ Priorit√© main d'≈ìuvre locale\n\nüìã **Documentation sp√©ciale**:\n‚Ä¢ Lettre d'exemption fiscale\n‚Ä¢ Accords avec Conseil de bande\n‚Ä¢ Permis sp√©ciaux territoire\n\n‚ö° **Hydro-Qu√©bec**:\n‚Ä¢ D√©lais prolong√©s (12-16 semaines)\n‚Ä¢ Coordination avec autorit√©s locales\n‚Ä¢ Inspections additionnelles\n\nüí∞ **Facturation**:\n‚Ä¢ Mention \"Territoire autochtone\"\n‚Ä¢ Aucune taxe applicable\n‚Ä¢ Paiements par ch√®que certifi√©"}
                ]
            })
            
        if 'Alexis' in name:
            examples.append({
                "messages": [
                    {"role": "system", "content": "Tu es PGI-IA, sp√©cialiste syst√®mes d'alarme incendie."},
                    {"role": "user", "content": "D√©tails sur le S-0722?"},
                    {"role": "assistant", "content": "**S-0722 - Syst√®me d'alarme incendie Alexis Nihon**:\n\nüè¢ **Envergure**:\n‚Ä¢ 3 tours + plaza commerciale\n‚Ä¢ Syst√®me Siemens int√©gr√©\n‚Ä¢ 2000+ dispositifs\n\nüîß **Travaux majeurs**:\n‚Ä¢ Remplacement panneaux principaux\n‚Ä¢ Nouveau r√©seau classe A\n‚Ä¢ Int√©gration ascenseurs/HVAC\n‚Ä¢ Mise aux normes 2020\n\nüìÖ **√âch√©ancier**:\n‚Ä¢ Phase 1: Tour 1 (compl√©t√©)\n‚Ä¢ Phase 2: Tour 2 (en cours)\n‚Ä¢ Phase 3: Plaza (√† venir)\n\n‚ö†Ô∏è **D√©fis**:\n‚Ä¢ Maintien op√©rations 24/7\n‚Ä¢ Coordination multi-locataires\n‚Ä¢ Tests hebdomadaires obligatoires"}
                ]
            })
            
        self.training_data.extend(examples)
        self.stats['examples'] += len(examples)
        
    def add_generic_examples(self):
        """Ajouter exemples g√©n√©riques Qu√©bec"""
        generic = [
            {
                "messages": [
                    {"role": "system", "content": "Tu es PGI-IA pour la construction √©lectrique qu√©b√©coise."},
                    {"role": "user", "content": "Comment g√©rer une directive de changement?"},
                    {"role": "assistant", "content": "**Gestion des directives de changement (PCE/ODT)**:\n\n1Ô∏è‚É£ **R√©ception**:\n‚Ä¢ Documenter imm√©diatement\n‚Ä¢ Assigner num√©ro s√©quentiel\n‚Ä¢ Photo/scan de la directive\n\n2Ô∏è‚É£ **Analyse**:\n‚Ä¢ √âvaluer impact budget\n‚Ä¢ Calculer d√©lais additionnels\n‚Ä¢ V√©rifier faisabilit√© technique\n\n3Ô∏è‚É£ **Approbation**:\n‚Ä¢ Obtenir signature client\n‚Ä¢ Confirmer par courriel\n‚Ä¢ Mettre √† jour registre\n\n4Ô∏è‚É£ **Ex√©cution**:\n‚Ä¢ Informer chantier\n‚Ä¢ Ajuster planning\n‚Ä¢ Documenter r√©alisation\n\n5Ô∏è‚É£ **Facturation**:\n‚Ä¢ Joindre √† facture progressive\n‚Ä¢ R√©f√©rencer # directive\n‚Ä¢ Conserver pour audit CCQ"}
                ]
            },
            {
                "messages": [
                    {"role": "system", "content": "Tu es PGI-IA, expert en normes qu√©b√©coises."},
                    {"role": "user", "content": "Ratio compagnon/apprenti CCQ?"},
                    {"role": "assistant", "content": "**Ratios CCQ - √âlectriciens**:\n\nüë∑ **Ratio de base**: 1:1\n‚Ä¢ 1 compagnon pour 1 apprenti\n‚Ä¢ Applicable sur tous chantiers\n\nüìä **Exceptions**:\n‚Ä¢ Premier apprenti: Aucun ratio\n‚Ä¢ Travaux r√©sidentiels l√©gers: 1:2\n‚Ä¢ Overtime/urgence: Flexible\n\n‚ö†Ô∏è **Calcul du ratio**:\n‚Ä¢ Par chantier, non par entreprise\n‚Ä¢ V√©rifi√© aux 2 semaines\n‚Ä¢ Bas√© sur heures travaill√©es\n\nüí∞ **P√©nalit√©s**:\n‚Ä¢ 1 029$ √† 2 058$ premi√®re offense\n‚Ä¢ Double si r√©cidive\n‚Ä¢ Possible suspension licence\n\nüí° **Conseil PGI-IA**:\nUtilisez le module RH pour tracker automatiquement vos ratios et recevoir des alertes!"}
                ]
            }
        ]
        
        self.training_data.extend(generic)
        self.stats['examples'] += len(generic)
        
    def save_training_data(self):
        """Sauvegarder dataset"""
        with open(OUTPUT_JSONL, 'w', encoding='utf-8') as f:
            for example in self.training_data:
                f.write(json.dumps(example, ensure_ascii=False) + '\n')
                
        print(f"\nüíæ Dataset sauvegard√©: {OUTPUT_JSONL}")
        print(f"üìö Total exemples: {len(self.training_data)}")

if __name__ == "__main__":
    importer = FastImporter()
    importer.import_priority_projects()